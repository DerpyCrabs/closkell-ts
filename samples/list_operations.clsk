; expected {"kind":"vector","value":[{"kind":"number","value":36},{"kind":"number","value":49},{"kind":"number","value":64},{"kind":"number","value":81},{"kind":"number","value":100}]}
(let [map (fn [f lst]
            (if (empty? lst)
              []
              (cons (f (first lst))
                    (map f (rest lst)))))
      filter (fn [pred lst]
               (if (empty? lst)
                 []
                 (if (pred (first lst))
                   (cons (first lst)
                         (filter pred (rest lst)))
                   (filter pred (rest lst)))))
      lst [1 2 3 4 5 6 7 8 9 10]]
  (map (fn [x] (* x x))
       (filter (fn [x] (> x 5)) lst))) 